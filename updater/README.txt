====== По планировщику celery ======

Задача обновления данных для celery находится в файле `updater/tasks.py` 
На Windows не стал устанавливать django для celery, вместо этого создал celery-приложение.
См. в папке updater(с 2-мя файлами):
    1. celery.py  - используется для задания конфигурации приложения в celery. 
       В django этот файл будет выглядеть по другому. Вы могли бы запускать задачу в рамках вашего `youtube_platform`
    2. tasks.txt - описание периодической задачи. 
       Мне нужно было задать путь импорта для updater на директорию выше, в django должно быть проще

Запуск задачи на виндовс производил в сседующем порядке:
1. celery -A updater beat
2. celery -A updater worker
Проверка показа


====== По основному коду ======

Реализован в YtLocalStore.py
На входе: коллекция `yt_channels` - проход по всем каналам и всем видео, принадлежащих данному каналу (используется uploads-playlist is channel_info)
    коллекция yt_channels должна содержать документы с полями [channelId, channelUrl]
На выходе три коллекции (префикс можно поменять, если надо):
    1. yt_local_channels  - вся необходимая информация по каналам
    2. yt_local_videos    - вся необходимая информация по видео из обрабатываемых каналов
    3. yt_local_comments  - комментарии помещаются в отдельную коллекцию с ключом `videoId` для связи
Комментарии выделены в отдельную коллекцию, так как для видео это огромный объем данных и при поиске видео перелопатить огромные документы врядли целесообразно.

Несколько функций в работе с youtube пришлось изменить, поэтому появился дополнительный файл: `hotfix.py`